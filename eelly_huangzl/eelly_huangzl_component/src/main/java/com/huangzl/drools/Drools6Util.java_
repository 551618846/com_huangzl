/** 
 * @组件名：eelly_springmvc_component
 * @包名：com.eelly.mvc.drools
 * @文件名：Drools6Util.java
 * @创建时间： 2014年11月6日 上午9:42:14
 * @版权信息：Copyright © 2014 eelly Co.Ltd,衣联网版权所有。
 */

package com.huangzl.drools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.JarURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.kie.api.KieServices;
import org.kie.api.builder.KieBuilder;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.builder.Message.Level;
import org.kie.api.builder.model.KieBaseModel;
import org.kie.api.builder.model.KieModuleModel;
import org.kie.api.io.KieResources;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

import com.huangzl.drools.HelloWorld.Message;

/**
 * @类名：Drools6Util
 * @描述:
 * @创建人：<a href=mailto: huangzhenliang@eelly.net>huangzhenliang</a>
 * @修改人：
 * @修改时间：2014年11月6日 上午9:42:14
 * @修改说明：<br/>
 * @版本信息：V1.0.0<br/>
 */
public class Drools6Util {

    // private static byte[] lock = new byte[0];

    private static KieContainer kieContainer;

    static {
        if (kieContainer == null) {
            initKieContainer();
        }
    }

    private static void initKieContainer() {
        KieServices kieServices = KieServices.Factory.get();
        KieResources resources = kieServices.getResources();
        KieModuleModel kieModuleModel = kieServices.newKieModuleModel();// 1

        KieBaseModel baseModel = kieModuleModel.newKieBaseModel("FileSystemKBase");// 2
        baseModel.newKieSessionModel("FileSystemKSession").setDefault(true);// 3
        KieFileSystem fileSystem = kieServices.newKieFileSystem();

        String xml = kieModuleModel.toXML();
        System.out.println(xml);// 4
        fileSystem.writeKModuleXML(xml);// 5
        
        Set<String> drls = FindFile.getClasses("drools",".drl");
        for(String drl : drls){
            String t = drl.replaceAll("\\.", "/") + ".drl" ;
            fileSystem.write("src/main/resources/"+t,
                    resources.newClassPathResource(t));// 6
        }
        System.out.println(drls);

//        fileSystem.write("src/main/resources/drools/hello/HelloWorld.drl",
//                resources.newClassPathResource("drools/hello/HelloWorld.drl"));// 6
//        fileSystem.write("src/main/resources/drools/person/person.drl",
//                resources.newClassPathResource("drools/person/person.drl"));// 6

        KieBuilder kb = kieServices.newKieBuilder(fileSystem);
        kb.buildAll();// 7
        if (kb.getResults().hasMessages(Level.ERROR)) {
            throw new RuntimeException("Build Errors:\n" + kb.getResults().toString());
        }
        kieContainer = kieServices.newKieContainer(kieServices.getRepository()
                .getDefaultReleaseId());
        /*
         * 1先创建KieModuleModel； 2再创建KieBaseModel； 3然后创建KieSessionModel；
         * 4创建完成之后可以生产一个xml文件，就是kmodule.xml文件了； 5将这个xml文件写入到KieFileSystem中； 6然后将规则文件等写入到KieFileSystem中；
         * 7最后通过KieBuilder进行构建就将该kmodule加入到KieRepository中了，这样就将自定义的kmodule加入到引擎中了，就可以按照之前的方法进行使用了。
         */

    }

    private synchronized static KieContainer getKieContainer() {
        if (kieContainer == null) {
            initKieContainer();
        }

        return kieContainer;
    }

    public synchronized static void reloadDrools() {
        Drools6Util.kieContainer = null;
        Drools6Util.kieContainer = Drools6Util.getKieContainer();
    }

    /*public static KieSession getKieSession(String sessionName) {
        KieSession kSession = getKieContainer().newKieSession(sessionName);
        return kSession;
    }*/
    public static KieSession getKieSession() {
        KieSession kSession = getKieContainer().newKieSession();
        return kSession;
    }
    
    public static void main(String[] args) {
//        Set<String> classes = FindFile.getClasses("drools",".drl");
//        System.out.println(classes);
        
        KieSession ksession = Drools6Util.getKieSession();
        
        final Message message = new Message();
        message.setName("huangzl");
        
        ksession.insert( message );
        
        
        // and fire the rules
        ksession.fireAllRules();
    }

}

class FindFile {

    /**
     * 从包package中获取所有的Class
     * 
     * @param pack
     * @return
     */
    public static Set<String> getClasses(String pack,String endsWith) {

        // 第一个class类的集合
        Set<String> classes = new LinkedHashSet<String>();
        // 是否循环迭代
        boolean recursive = true;
        // 获取包的名字 并进行替换
        String packageName = pack;
        String packageDirName = packageName.replace('.', '/');
        // 定义一个枚举的集合 并进行循环来处理这个目录下的things
        Enumeration<URL> dirs;
        try {
            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
            // 循环迭代下去
            while (dirs.hasMoreElements()) {
                // 获取下一个元素
                URL url = dirs.nextElement();
                // 得到协议的名称
                String protocol = url.getProtocol();
                // 如果是以文件的形式保存在服务器上
                if ("file".equals(protocol)) {
                    System.err.println("file类型的扫描");
                    // 获取包的物理路径
                    String filePath = URLDecoder.decode(url.getFile(), "UTF-8");
                    // 以文件的方式扫描整个包下的文件 并添加到集合中
                    findAndAddClassesInPackageByFile(packageName, filePath, recursive, classes, endsWith);
                } else if ("jar".equals(protocol)) {
                    // 如果是jar包文件
                    // 定义一个JarFile
                    System.err.println("jar类型的扫描");
                    JarFile jar;
                    try {
                        // 获取jar
                        jar = ((JarURLConnection) url.openConnection()).getJarFile();
                        // 从此jar包 得到一个枚举类
                        Enumeration<JarEntry> entries = jar.entries();
                        // 同样的进行循环迭代
                        while (entries.hasMoreElements()) {
                            // 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件
                            JarEntry entry = entries.nextElement();
                            String name = entry.getName();
                            // 如果是以/开头的
                            if (name.charAt(0) == '/') {
                                // 获取后面的字符串
                                name = name.substring(1);
                            }
                            // 如果前半部分和定义的包名相同
                            if (name.startsWith(packageDirName)) {
                                int idx = name.lastIndexOf('/');
                                // 如果以"/"结尾 是一个包
                                if (idx != -1) {
                                    // 获取包名 把"/"替换成"."
                                    packageName = name.substring(0, idx).replace('/', '.');
                                }
                                // 如果可以迭代下去 并且是一个包
                                if ((idx != -1) || recursive) {
                                    // 如果是一个.class文件 而且不是目录
                                    if (name.endsWith(endsWith) && !entry.isDirectory()) {
                                        // 去掉后面的".class" 获取真正的类名
                                        String className = name.substring(packageName.length() + 1,
                                                name.length() - 6);
                                        try {
                                            // 添加到classes
                                            classes.add(packageName + '.' + className);
                                        } catch (Exception e) {
                                            // log
                                            // .error("添加用户自定义视图类错误 找不到此类的.class文件");
                                            e.printStackTrace();
                                        }
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        // log.error("在扫描用户定义视图时从jar包获取文件出错");
                        e.printStackTrace();
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return classes;
    }

    /**
     * 以文件的形式来获取包下的所有Class
     * 
     * @param packageName
     * @param packagePath
     * @param recursive
     * @param classes
     */
    public static void findAndAddClassesInPackageByFile(String packageName, String packagePath,
            final boolean recursive, Set<String> classes,final String endsWith) {
        // 获取此包的目录 建立一个File
        File dir = new File(packagePath);
        // 如果不存在或者 也不是目录就直接返回
        if (!dir.exists() || !dir.isDirectory()) {
            // log.warn("用户定义包名 " + packageName + " 下没有任何文件");
            return;
        }
        // 如果存在 就获取包下的所有文件 包括目录
        File[] dirfiles = dir.listFiles(new FileFilter() {

            // 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)
            public boolean accept(File file) {
                return (recursive && file.isDirectory()) || (file.getName().endsWith(endsWith));
            }
        });
        // 循环所有文件
        for (File file : dirfiles) {
            // 如果是目录 则继续扫描
            if (file.isDirectory()) {
                findAndAddClassesInPackageByFile(packageName + "." + file.getName(),
                        file.getAbsolutePath(), recursive, classes, endsWith);
            } else {
                // 如果是java类文件 去掉后面的.class 只留下类名
                String className = file.getName().substring(0, file.getName().length() - endsWith.length());
                try {
                    // 添加到集合中去
                    // classes.add(Class.forName(packageName + '.' + className));
                    // 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净
                    classes.add(packageName + '.' + className);
                } catch (Exception e) {
                    // log.error("添加用户自定义视图类错误 找不到此类的.class文件");
                    e.printStackTrace();
                }
            }
        }
    }
}
