/**  
 * @组件名：eelly_springmvc_component
 * @包名：com.eelly.mvc.common
 * @文件名：MyShiro.java
 * @创建时间： 2014年10月17日 下午4:36:24
 * @版权信息：Copyright © 2014 eelly Co.Ltd,衣联网版权所有。
 */
package com.huangzl.shiro;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;  
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authz.AuthorizationInfo;  
import org.apache.shiro.authz.SimpleAuthorizationInfo;  
import org.apache.shiro.authz.permission.PermissionResolver;
import org.apache.shiro.authz.permission.RolePermissionResolver;
import org.apache.shiro.cache.Cache;
import org.apache.shiro.cas.CasAuthenticationException;
import org.apache.shiro.cas.CasRealm;
import org.apache.shiro.cas.CasToken;
import org.apache.shiro.subject.PrincipalCollection;  
import org.apache.shiro.subject.SimplePrincipalCollection;
import org.apache.shiro.subject.support.DelegatingSubject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;
import org.jasig.cas.client.authentication.AttributePrincipal;
import org.jasig.cas.client.validation.Assertion;
import org.jasig.cas.client.validation.TicketValidationException;
import org.jasig.cas.client.validation.TicketValidator;
import org.springframework.stereotype.Service;  
import org.springframework.transaction.annotation.Transactional;  

import com.eelly.mvc.shiro.model.Permission;
import com.eelly.mvc.shiro.model.Role;
import com.eelly.mvc.shiro.model.User;
import com.eelly.mvc.shiro.service.IUserService;
  
  
  
/**  
 * @类名：MyShiro
 * @描述: 
 * @创建人：<a href=mailto: chencong@eelly.net>chencong</a>
 * @修改人：
 * @修改时间：2014年11月14日 下午1:49:43
 * @修改说明  <br/>
 * @版本信息：V1.0.0<br/>
 */
@Service  
@Transactional  
public class MyShiro extends CasRealm{  
    
    @Resource
    private IUserService userService;
    @Value("${casUrl}")
    private String casUrl;
    @Value("${casServiceUrl}")
    private String casServiceUrl;
    
    private static Logger myLog = LoggerFactory.getLogger(MyShiro.class);
    
    
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        CasToken casToken = (CasToken) token;
        if (token == null) {
            return null;
        }
        
        String ticket = (String)casToken.getCredentials();
        if (!StringUtils.hasText(ticket)) {
            return null;
        }
        
        TicketValidator ticketValidator = ensureTicketValidator();

        try {
            // contact CAS server to validate service ticket
            Assertion casAssertion = ticketValidator.validate(ticket, getCasService());
            // get principal, user id and attributes
            AttributePrincipal casPrincipal = casAssertion.getPrincipal();
            String userId = casPrincipal.getName();
            myLog.debug("Validate ticket : {} in CAS server : {} to retrieve user : {}", new Object[]{
                    ticket, getCasServerUrlPrefix(), userId
            });

            Map<String, Object> attributes = casPrincipal.getAttributes();
            // refresh authentication token (user id + remember me)
            casToken.setUserId(userId);
            String rememberMeAttributeName = getRememberMeAttributeName();
            String rememberMeStringValue = (String)attributes.get(rememberMeAttributeName);
            boolean isRemembered = rememberMeStringValue != null && Boolean.parseBoolean(rememberMeStringValue);
            if (isRemembered) {
                casToken.setRememberMe(true);
            }
            // create simple authentication info
            List<Object> principals = CollectionUtils.asList(userId, attributes);
            PrincipalCollection principalCollection = new SimplePrincipalCollection(principals, getName());
            
            
            /************************************************/
            /**
             * 这里注入sessionId是在查找/创建session之前.因为创建会覆盖,所以只能在查找时找到,查找有读取cookie的过程,那么读取不到从线程取.
             * 作废:把userID注入id生成器(threadlocal),作为sessionID,后面创建shiro-session时使用,可以保证一个用户在多个应用下只有一个shiro-session(必须先创建session;所以不能注入cookie;)
             * //新创建是否会覆盖shiro-session?CAS跳转回来,重新创建shiro-session,覆盖了.
             * 
             */
            /*String sid = ShiroSessionIdGenerator.ID_PREFIX + userId;
            ShiroSessionIdGenerator.setId(sid);
            
            ShiroSimpleCookie.setId(sid);*/
            /************************************************/
            
            
            return new SimpleAuthenticationInfo(principalCollection, ticket);
        } catch (TicketValidationException e) { 
            throw new CasAuthenticationException("Unable to validate ticket [" + ticket + "]", e);
        }
    }

    /**
     * 授权信息
     */
    protected AuthorizationInfo doGetAuthorizationInfo(
            PrincipalCollection principals) {
        String username = (String) principals.fromRealm(getName()).iterator()
                .next();
        if (username != null) {
            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
            User user = userService.findByUsername(username);
            if (user != null) {
                List<Role> roles = userService.getRoles(user.getRecId());
                if (roles != null) {
                    for (Role each : roles) {
                        info.addRole(each.getRoleName());
                        List<Permission> permissions = userService
                                .getPermissions(each.getRecId());
                        for (Permission per : permissions) {
                            info.addStringPermission(per.getPermissionValue());
                            
                            
                            //org.apache.shiro.authz.Permission 的实现类有WildcardPermission,DomainPermission
                            /*
                             * 方法类权限,使用简单字符串权限,权限定义的格式是方法名称的全名:"类名.方法名",方法权限用AOP统一控制,
                             * 匹配方式SecurityUtils.getSubject().isPermitted("目标类名.方法名")
                             */
                            /*
                             * 数据列级权限,使用自定义的ColumnPermission,
                             * 匹配方式SecurityUtils.getSubject().isPermitted(new ColumnPermission("权限名称"))
                             */
                            /*String type = per.getPermissionType();
                            String name = per.getPermissionName();
                            int pid = per.getRecId();
                            if("column".equals(type)){
                                HashMap m = new HashMap();
                                m.put("permission_id", pid);
                                
                                Set<Map> list = userService.findPermissionCol(m);
                                Set<String> columns = new HashSet<String>();
                                for(Map t : list){
                                    String col = t.get("column_name")+"";
                                    columns.add(col);
                                }
                                ColumnPermission c = new ColumnPermission(name, columns);
                                info.addObjectPermission(c);
                            }*/
                            
                            
                        }
                    }
                }
                /*Set<String> permissionAll=info.getStringPermissions();//有可能null
                Set<String> permissionLimited=new HashSet<String>();
                
                List<Role> rolesLimited = userService.getRolesByLimited(user.getRecId());
                if (rolesLimited != null) {
                    for (Role each : rolesLimited) {
                        List<Permission> permissions = userService.getPermissions(each.getRecId());
                        for (Permission per : permissions) {
                            permissionLimited.add(per.getPermissionName());
                        }
                    }
                }
                if(permissionAll != null){
                    for(Iterator<String> it= permissionAll.iterator();it.hasNext();){
                        if(permissionLimited.contains(it.next())){
                            it.remove();
                        }
                    }
                    info.setStringPermissions(permissionAll);
                }else{
//                    info.setStringPermissions(permissionAll);
                }*/
                return info;
            }
        }
        return null;
    }
    
    
    /**
     * @方法名：getPermissions
     * @描述：获取用户的权限列表,参考父类org.apache.shiro.realm.AuthorizingRealm实现 
     * @创建人：<a href=mailto: huangzhenliang@eelly.net>huangzhenliang</a>
     * @修改人：
     * @修改时间：2014年11月14日 下午4:54:14
     * @return 
     * @返回值：Collection<org.apache.shiro.authz.Permission> 
     * @异常说明：
     */
    public Collection<org.apache.shiro.authz.Permission> getPermissions(){
        PrincipalCollection principals = SecurityUtils.getSubject().getPrincipals();
        AuthorizationInfo info = getAuthorizationInfo(principals);
        
        Set<org.apache.shiro.authz.Permission> permissions = new HashSet<org.apache.shiro.authz.Permission>();

        if (info != null) {
            Collection<org.apache.shiro.authz.Permission> perms = info.getObjectPermissions();
            if (!CollectionUtils.isEmpty(perms)) {
                permissions.addAll(perms);
            }
            perms = resolvePermissions(info.getStringPermissions());
            if (!CollectionUtils.isEmpty(perms)) {
                permissions.addAll(perms);
            }

            perms = resolveRolePermissions(info.getRoles());
            if (!CollectionUtils.isEmpty(perms)) {
                permissions.addAll(perms);
            }
        }

        if (permissions.isEmpty()) {
            return Collections.emptySet();
        } else {
            return Collections.unmodifiableSet(permissions);
        }
    }
    
    
    /**
     * @方法名：resolvePermissions
     * @描述： getPermissions方法使用到,参考父类实现
     * @创建人：<a href=mailto: huangzhenliang@eelly.net>huangzhenliang</a>
     * @修改人：
     * @修改时间：2014年11月14日 下午4:55:17
     * @param stringPerms
     * @return 
     * @返回值：Collection<org.apache.shiro.authz.Permission> 
     * @异常说明：
     */
    private Collection<org.apache.shiro.authz.Permission> resolvePermissions(Collection<String> stringPerms) {
        Collection<org.apache.shiro.authz.Permission> perms = Collections.emptySet();
        PermissionResolver resolver = getPermissionResolver();
        if (resolver != null && !CollectionUtils.isEmpty(stringPerms)) {
            perms = new LinkedHashSet<org.apache.shiro.authz.Permission>(stringPerms.size());
            for (String strPermission : stringPerms) {
                org.apache.shiro.authz.Permission permission = getPermissionResolver().resolvePermission(strPermission);
                perms.add(permission);
            }
        }
        return perms;
    }
    
    
    /**
     * @方法名：resolveRolePermissions
     * @描述：getPermissions方法使用到,参考父类实现 
     * @创建人：<a href=mailto: huangzhenliang@eelly.net>huangzhenliang</a>
     * @修改人：
     * @修改时间：2014年11月14日 下午4:55:35
     * @param roleNames
     * @return 
     * @返回值：Collection<org.apache.shiro.authz.Permission> 
     * @异常说明：
     */
    private Collection<org.apache.shiro.authz.Permission> resolveRolePermissions(Collection<String> roleNames) {
        Collection<org.apache.shiro.authz.Permission> perms = Collections.emptySet();
        RolePermissionResolver resolver = getRolePermissionResolver();
        if (resolver != null && !CollectionUtils.isEmpty(roleNames)) {
            perms = new LinkedHashSet<org.apache.shiro.authz.Permission>(roleNames.size());
            for (String roleName : roleNames) {
                Collection<org.apache.shiro.authz.Permission> resolved = resolver.resolvePermissionsInRole(roleName);
                if (!CollectionUtils.isEmpty(resolved)) {
                    perms.addAll(resolved);
                }
            }
        }
        return perms;
    }

   /* *//**
     * 认证信息
     *//*
    protected AuthenticationInfo doGetAuthenticationInfo(
            AuthenticationToken authcToken) throws AuthenticationException {
        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;
        String userName = token.getUsername();
        if (userName != null && !"".equals(userName)) {
            User temp = new User();
            temp.setUsername(token.getUsername());
            temp.setPassword(String.valueOf(token.getPassword()));
            User user = userService.validate(temp);

            if (user != null)
                return new SimpleAuthenticationInfo(user.getUsername(),
                        user.getPassword(), getName());
        }
        return null;
    }*/
    
   

    // 更新 授权信息缓存
    public void clearCachedAuthorizationInfo() {
        PrincipalCollection principals = ((DelegatingSubject)SecurityUtils.getSubject()).getPrincipals();
        clearCachedAuthorizationInfo(principals);
    }

    // 清除所有用户授权信息缓存.
    public void clearAllCachedAuthorizationInfo() {
        Cache<Object, AuthorizationInfo> cache = getAuthorizationCache();
        if (cache != null) {
            for (Object key : cache.keys()) {
                cache.remove(key);
            }
        }
    }  
    /**
     * cas登录认证地址
     */
    public String getCasServerUrlPrefix() {
        return casUrl;
    }
    /**
     * 返回 CAS 客户端处理地址
     */
    public String getCasService() {
        return casServiceUrl;
    }
  
} 
